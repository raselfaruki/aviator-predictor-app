import streamlit as st
import random
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Custom Theme Setup (Dark / Light)
theme = st.sidebar.radio("ЁЯОи ржерж┐ржо ржмрзЗржЫрзЗ ржирж┐ржи:", ["Dark", "Light"])
if theme == "Dark":
    st.markdown("<style>body{background-color:#0E1117; color:white}</style>", unsafe_allow_html=True)

# Title
st.title("тЬИя╕П Aviator Predictor Game (Streamlit Pro Edition ЁЯЗзЁЯЗй)")

# Cashout target
cashout_x = st.sidebar.number_input("ЁЯОп ржЖржкржирж╛рж░ Target Cashout (x):", min_value=1.0, max_value=10.0, value=2.0, step=0.1)

# Auto Sim Settings
auto_rounds = st.sidebar.slider("ЁЯФБ ржХрзЯржЯрж┐ рж░рж╛ржЙржирзНржб ржЪрж╛рж▓рж╛рждрзЗ ржЪрж╛ржи?", 1, 100, 1)
if "results" not in st.session_state:
    st.session_state.results = []

# Game Logic
def generate_multiplier():
    return round(random.expovariate(1/2), 2)

def analyze_signal(data):
    if len(data) < 5:
        return "ЁЯФД ржкрж░рзНржпрж╛ржкрзНржд ржбрзЗржЯрж╛ ржирзЗржЗ"
    avg = np.mean(data[-5:])
    if avg > 2.0:
        return "ЁЯУИ рж╣рж╛ржЗ ржЯрзНрж░рзЗржирзНржб"
    elif avg < 1.5:
        return "ЁЯУЙ рж▓рзЛ ржЯрзНрж░рзЗржирзНржб"
    else:
        return "ЁЯФД ржЯрзНрж░рзЗржирзНржб ржЕрж╕рзНржкрж╖рзНржЯ"

def cashout_result(mult, target):
    return "тЬЕ ржЬрж┐рждрзЗржЫрзЗржи!" if mult >= target else "тЭМ рж╣рж╛рж░рж┐рзЯрзЗржЫрзЗржи"

# Simulate button
if st.button("ЁЯЪА рж░рж╛ржЙржирзНржб рж╢рзБрж░рзБ ржХрж░рзБржи"):
    for _ in range(auto_rounds):
        m = generate_multiplier()
        st.session_state.results.append(m)
    st.success(f"{auto_rounds} рж░рж╛ржЙржирзНржб рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржорзНржкржирзНржи рж╣рзЯрзЗржЫрзЗ!")

# Display Results
if st.session_state.results:
    latest = st.session_state.results[-1]
    st.markdown(f"**ЁЯУК рж╕рж░рзНржмрж╢рзЗрж╖ ржорж╛рж▓рзНржЯрж┐ржкрзНрж▓рж╛рзЯрж╛рж░:** `{latest}x`")
    st.markdown(f"**ЁЯУб рж╕рж┐ржЧржирзНржпрж╛рж▓:** `{analyze_signal(st.session_state.results)}`")
    st.markdown(f"**ЁЯТ░ рж░рзЗржЬрж╛рж▓рзНржЯ:** `{cashout_result(latest, cashout_x)}`")

    # Line Chart
    st.subheader("ЁЯУИ ржорж╛рж▓рзНржЯрж┐ржкрзНрж▓рж╛рзЯрж╛рж░ ржЯрзНрж░рзЗржирзНржб")
    fig, ax = plt.subplots()
    ax.plot(st.session_state.results[-50:], marker="o", color="blue")
    ax.set_xlabel("рж░рж╛ржЙржирзНржб")
    ax.set_ylabel("x ржорж╛рж▓рзНржЯрж┐ржкрзНрж▓рж╛рзЯрж╛рж░")
    ax.grid(True)
    st.pyplot(fig)

    # Download Option
    df = pd.DataFrame(st.session_state.results, columns=["Multiplier"])
    st.download_button("ЁЯУе CSV ржПржХрзНрж╕ржкрзЛрж░рзНржЯ", df.to_csv(index=False), file_name="aviator_results.csv")

# Reset button
if st.button("ЁЯФД ржирждрзБржи ржХрж░рзЗ рж╢рзБрж░рзБ ржХрж░рзБржи"):
    st.session_state.results = []
    st.warning("рж░рзЗржЬрж╛рж▓рзНржЯ рж▓рж┐рж╕рзНржЯ ржХрзНрж▓рж┐рзЯрж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
